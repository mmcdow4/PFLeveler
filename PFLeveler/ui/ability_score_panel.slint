import { VerticalBox, ComboBox, Button, CheckBox } from "std-widgets.slint";
import { AbilityScoreGrid, AbilityScoreInfo, AbilityScoreMode } from "ability_score_grid.slint";
import { ArmorClassGrid } from "armor_class_grid.slint";
import { SavingThrowGrid } from "saving_throw_grid.slint";
import { CombatBonusGrid } from "combat_bonus_grid.slint";

export component AbilityScorePanel inherits Rectangle {
    in-out property<[string]> dropdown-values: ["0", "0", "0", "0", "0", "0"];
    in-out property<[int]> dropdown-assignments: [-1, -1, -1, -1, -1, -1];
    in-out property<int> dice-remaining: 0;
    in-out property<int> points-remaining: 0;
    in-out property<[AbilityScoreInfo]> ability-score-data: [
        { name: "Strength", base-value: 0, racial-bonus: 0 },
        { name: "Dexterity", base-value: 0, racial-bonus: 0 },
        { name: "Constitution", base-value: 0, racial-bonus: 0 },
        { name: "Intelligence", base-value: 0, racial-bonus: 0 },
        { name: "Wisdom", base-value: 0, racial-bonus: 0 },
        { name: "Charisma", base-value: 0, racial-bonus: 0 },
    ];
    in-out property<bool> locked: true;
    in-out property<AbilityScoreMode> mode: none;
    in-out property<bool> flex-racial-bonus: false;

    in property<int> selected-method-index: method-box.current-index;
    property<[string]> method-descriptions: [
        "Roll 4d6 and discard the lowest die, then sum the remaining three. Repeat 5 more times, then assign each value to an ability score.",
        "Roll 3d6 and sum the dice. Repeat 5 more times, then assign each value to an ability score.",
        "Roll 2d6 and add 6 to the sum of the dice. Repeat 5 more times, then assign each value to an ability score.",
        "You start with a pool of 24 dice. For each ability score, choose how many dice to roll (minimum 3), then sum the highest three dice to get that ability score's value.",
        "Choose a point budget (10 is low power, 15 is standard, 20 is high power, 25 is very high power). Each ability score starts at 10, and you may spend points to increase a single score (up to a max of 18 before racial bonuses), or gain points by reducing an ability score (to a minimum of 7 before racial bonuses). It becomes more expensive to increase an ability score the higher the value gets - see Table 1-1 of the Core Rulebook for a full breakdown of point costs.",
        "Generate values however you want and directly type them in yourself."
    ];

    in-out property<string> text-box-string: "[Method Description]";

    in-out property<int> armor-val: 0;
    in-out property<int> shield-val: 0;
    in-out property<int> deflection-mod: 0;
    in-out property<int> natural-armor: 0;
    in-out property<int> misc-ac-mod: 0;
    in-out property<int> misc-initiative-mod: 0;

    in-out property<[int]> saving-throw-bases: [0, 0, 0];
    property<[int]> saving-throw-ability-mods: [
        root.ability-score-data[2].modifier,
        root.ability-score-data[1].modifier,
        root.ability-score-data[4].modifier,
    ];
    in-out property<[int]> saving-throw-magic-mods: [0, 0, 0];
    in-out property<[int]> saving-throw-misc-mods: [0, 0, 0];
    in-out property<[int]> saving-throw-temp-mods: [0, 0, 0];

    in-out property<int> base-attack-bonus: 0;
    in-out property<int> size-combat-mod: 0;

    callback lock-clicked;
    callback select-clicked(int);
    callback dropdown-selected(int, int);
    callback roll-value(int);

    VerticalLayout {
        HorizontalLayout {
            height: 10%;
            padding: 10px;
            spacing: 4px;
            Text {
                vertical-alignment: top;
                horizontal-alignment: left;
                text: "Choose a Method: ";
                visible: !locked;
            }

            method-box:= ComboBox {
                model: [
                    "Standard",
                    "Classic",
                    "Heroic",
                    "Dice Pool",
                    "Purchase",
                    "Direct Input",
                ];
                max-height: 20px;
                vertical-stretch: 0;
                width: 200px;
                visible: !locked;
                enabled: !locked;
                selected(current-value) => { root.text-box-string = root.method-descriptions[selected-method-index]; }
            }

            Button {
                text: "Select";
                max-height: 20px;
                vertical-stretch: 0;
                width: 150px;
                visible: !locked;
                enabled: !locked;
                clicked => { 
                    if selected-method-index == 4 {
                        text-box-string = "You have " + root.points-remaining +
                        " points remaining.\nYou can also switch methods or " +
                        "start over by clicking the select button again.";
                    }
                    root.select-clicked(selected-method-index); }
            }

            Rectangle {
                width: 75%;
                background: white;
                preferred-height: 150px;
                visible: !locked;
                Text {
                    width: parent.width;
                    height: parent.height;
                    horizontal-alignment: left;
                    vertical-alignment: top;
                    text: text-box-string;
                    wrap: word-wrap;
                }
            }
        }

        ability-score-grid:= AbilityScoreGrid {
            height: 15%;
            dropdown-values: root.dropdown-values;
            dropdown-assignments: root.dropdown-assignments;
            dice-remaining: root.dice-remaining;
            points-remaining: root.points-remaining;
            ability-score-data: root.ability-score-data;
            locked: root.locked;
            mode: root.mode;
            flex-racial-bonus: root.flex-racial-bonus;

            dropdown-selected(as_id, id) => { root.dropdown-selected(as_id, id); }
            roll-value(value) => { root.roll-value(value); }
        }

        armor-class-grid:= ArmorClassGrid {
            height: 10%;
            armor-val: root.armor-val;
            shield-val: root.shield-val;
            dex-mod: root.ability-score-data[1].modifier;
            size-mod: -1*root.size-combat-mod;
            natural-armor: root.natural-armor;
            deflection-mod: root.deflection-mod;
            misc-ac-mod: root.misc-ac-mod;
            misc-initiative-mod: root.misc-initiative-mod;
        }

        saving-throw-grid:= SavingThrowGrid {
            height: 10%;
            saving-throw-bases: root.saving-throw-bases;
            saving-throw-ability-mods: root.saving-throw-ability-mods;
            saving-throw-magic-mods: root.saving-throw-magic-mods;
            saving-throw-misc-mods: root.saving-throw-misc-mods;
            saving-throw-temp-mods: root.saving-throw-temp-mods;
        }

        combat-bonus-grid:= CombatBonusGrid {
            height: 15%;
            base-attack-bonus: root.base-attack-bonus;
            str-mod: root.ability-score-data[0].modifier;
            dex-mod: root.ability-score-data[1].modifier;
            size-combat-mod: root.size-combat-mod;
        }

        Button {
            width: 10%;
            preferred-width: 200px;
            horizontal-stretch: 0;
            text: "Lock";
            clicked() => { root.lock-clicked(); }
            visible: !root.locked;
            enabled: !root.locked;
        }
    }
}
